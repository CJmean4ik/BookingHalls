// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BookingHallsContext))]
    partial class BookingHallsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.BookedHalls", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateStart")
                        .HasColumnType("date");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid?>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BookerId");

                    b.HasIndex("HallId");

                    b.ToTable("BookedHalls");
                });

            modelBuilder.Entity("Domain.Models.AvailableHallServices", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AvailableHallServices");
                });

            modelBuilder.Entity("Domain.Models.BookedHallServices", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookedHallsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookedHallsId");

                    b.ToTable("BookedHallServices");
                });

            modelBuilder.Entity("Domain.Models.Booker", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaltPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bookers");
                });

            modelBuilder.Entity("Domain.Models.Hall", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Aggregates.BookedHalls", b =>
                {
                    b.HasOne("Domain.Models.Booker", "Booker")
                        .WithMany("BookedHalls")
                        .HasForeignKey("BookerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Hall", "Hall")
                        .WithMany("BookedHalls")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Booker");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Domain.Models.AvailableHallServices", b =>
                {
                    b.HasOne("Domain.Models.Hall", "Hall")
                        .WithMany("AvailableHallServices")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Service", "Service")
                        .WithMany("AvailableHallServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Hall");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Models.BookedHallServices", b =>
                {
                    b.HasOne("Domain.Aggregates.BookedHalls", "BookedHalls")
                        .WithMany("BookedHallServices")
                        .HasForeignKey("BookedHallsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Service", "Service")
                        .WithMany("BookedHallServices")
                        .HasForeignKey("BookedHallsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BookedHalls");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Aggregates.BookedHalls", b =>
                {
                    b.Navigation("BookedHallServices");
                });

            modelBuilder.Entity("Domain.Models.Booker", b =>
                {
                    b.Navigation("BookedHalls");
                });

            modelBuilder.Entity("Domain.Models.Hall", b =>
                {
                    b.Navigation("AvailableHallServices");

                    b.Navigation("BookedHalls");
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.Navigation("AvailableHallServices");

                    b.Navigation("BookedHallServices");
                });
#pragma warning restore 612, 618
        }
    }
}
